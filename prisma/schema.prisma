datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  male
  female
  other
  prefer_not_to_say
}

enum UserStatus {
  active
  inactive
  suspended
  pending_verification
}

enum Provider {
  google
  microsoft
  github
  linkedin
}

model User {
  id                             String        @id @default(uuid()) @db.Char(36)
  email                          String        @unique @db.VarChar(255)
  password_hash                  String?       @db.VarChar(255)
  is_admin                       Boolean       @default(false)
  first_name                     String?       @db.VarChar(100)
  last_name                      String?       @db.VarChar(100)
  display_name                   String?       @db.VarChar(200)
  avatar_url                     String?       @db.Text
  phone                          String?       @db.VarChar(20)
  date_of_birth                  DateTime?     @db.Date
  gender                         Gender?
  locale                         String        @default("es") @db.VarChar(10)
  timezone                       String        @default("America/Lima") @db.VarChar(50)
  email_verified                 Boolean       @default(false)
  phone_verified                 Boolean       @default(false)
  two_factor_enabled             Boolean       @default(false)
  two_factor_secret              String?       @db.VarChar(255)
  status                         UserStatus    @default(pending_verification)
  last_login_at                  DateTime?
  last_login_ip                  String?       @db.VarChar(45)
  failed_login_attempts          Int           @default(0)
  locked_until                   DateTime?
  email_verification_token       String?       @db.VarChar(255)
  email_verification_expires_at  DateTime?
  password_reset_token           String?       @db.VarChar(255)
  password_reset_expires_at      DateTime?
  created_at                     DateTime      @default(now())
  updated_at                     DateTime      @updatedAt
  deleted_at                     DateTime?

  oauth_accounts                 OAuthAccount[]
  refresh_tokens                 RefreshToken[]
  user_sessions                  UserSession[]
  audit_logs                     AuditLog[]
  backup_codes                   TwoFactorBackupCode[]

  @@index([email], name: "idx_email")
  @@index([status], name: "idx_status")
  @@index([created_at], name: "idx_created_at")
  @@index([email_verification_token], name: "idx_email_verification_token")
  @@index([password_reset_token], name: "idx_password_reset_token")
  @@map("users")
}

model OAuthAccount {
  id               String    @id @default(uuid()) @db.Char(36)
  user_id          String    @db.Char(36)
  provider         Provider
  provider_id      String    @db.VarChar(255)
  provider_email   String?   @db.VarChar(255)
  provider_username String?  @db.VarChar(255)
  access_token     String?   @db.Text
  refresh_token    String?   @db.Text
  token_expires_at DateTime?
  scope            String?   @db.Text
  raw_profile      Json?
  is_primary       Boolean   @default(false)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_id], name: "unique_provider_account")
  @@index([user_id], name: "idx_user_id")
  @@index([provider], name: "idx_provider")
  @@index([provider_email], name: "idx_provider_email")
  @@map("oauth_accounts")
}

model RefreshToken {
  id                String    @id @default(uuid()) @db.Char(36)
  user_id           String    @db.Char(36)
  token_hash        String    @unique @db.VarChar(255)
  jti               String    @unique @db.Char(36)
  created_at        DateTime  @default(now())
  expires_at        DateTime
  revoked_at        DateTime?
  replaced_by_token String?   @db.Char(36)
  device_info       Json?
  ip_address        String?   @db.VarChar(45)
  user_agent        String?   @db.Text

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], name: "idx_user_id")
  @@index([expires_at], name: "idx_expires_at")
  @@index([revoked_at], name: "idx_revoked_at")
  @@index([jti], name: "idx_jti")
  @@map("refresh_tokens")
}

model UserSession {
  id               String    @id @default(uuid()) @db.Char(36)
  user_id          String    @db.Char(36)
  session_token    String    @unique @db.VarChar(255)
  created_at       DateTime  @default(now())
  expires_at       DateTime
  last_accessed_at DateTime  @updatedAt
  ip_address       String?   @db.VarChar(45)
  user_agent       String?   @db.Text
  device_type      String?   @db.VarChar(50)
  browser          String?   @db.VarChar(100)
  os               String?   @db.VarChar(100)
  location         Json?
  is_active        Boolean   @default(true)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], name: "idx_user_id")
  @@index([expires_at], name: "idx_expires_at")
  @@index([is_active], name: "idx_is_active")
  @@map("user_sessions")
}

model AuditLog {
  id            String    @id @default(uuid()) @db.Char(36)
  user_id       String?   @db.Char(36)
  action        String    @db.VarChar(100)
  resource      String    @db.VarChar(100)
  resource_id   String?   @db.VarChar(255)
  details       Json?
  ip_address    String?   @db.VarChar(45)
  user_agent    String?   @db.Text
  success       Boolean
  error_message String?   @db.Text
  created_at    DateTime  @default(now())

  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([user_id], name: "idx_user_id")
  @@index([action], name: "idx_action")
  @@index([resource], name: "idx_resource")
  @@index([created_at], name: "idx_created_at")
  @@index([success], name: "idx_success")
  @@map("audit_logs")
}

model TwoFactorBackupCode {
  id         String   @id @default(uuid()) @db.Char(36)
  user_id    String   @db.Char(36)
  code_hash  String   @db.VarChar(255)
  used_at    DateTime?
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], name: "idx_user_id")
  @@map("two_factor_backup_codes")
}


